Create a class "TravelTrip" with the following attributes
    • travelStartLocation of type string
    • travelEndLocation of type string
    • travelDistance of type float (travel distance in Kilometers)
    • A pure virtual function called totalTripFare that takes no arguments and returns float.
    • A pure virtual function called totalTripTimeInMinutes no arguments and returns float.
    • A deleted default and copy constructor.
    • Getters & Setters for all attributes.

Create a class "ConfirmedTravelTrip" that extends "TravelTrip" class with the following attributes
    • travelTripBookedCar of type enum CAR_TYPE that has the following literals
        ◦ PRIME
        ◦ NEO
        ◦ BASIC
    • travelTripTrafficCondition of type enum TRAFFIC_STATE that has the following literals
        ◦ HEAVY
        ◦ MODERATE
        ◦ LIGHT
    • A function totalTripFare that overrides the function with this name from the base class. It must calculate totalTripFare based on following rules
        ◦ For the PRIME category of CAR_TYPE, total fare is travelDistance multiplied by 1.8.
        ◦ For the NEO category of CAR_TYPE, total fare is travelDistance multiplied by 1.5.
        ◦ For the BASIC category of CAR_TYPE, total fare is travelDistance multiplied by 1.2.
    • A function totalTripTimeInMinutes that overrides the function with this name from the base class. It must return total trip time (in minutes) as a float number based on following rules
        ◦ For the HEAVY category of TRAFFIC_STATE, total time is 1.8 into the travelDistance plus 30 minutes.
        ◦ For the MODERATE category of TRAFFIC_STATE, total time is 1.5 into the travelDistance plus 20 minutes.
        ◦ For the LIGHT category of TRAFFIC_STATE, total time is 1.3 into the travelDistance plus 10 minutes.
    • An overload of << operator must be added to display data of an object.
    • Getters & Setters for all attributes.

Create a functionalities.cpp file with the following functionalities

    • FindAverageTravelTime that accepts a reference to a standard list of ConfirmedTravelTrip type pointers and returns the average value of totalTripTimeInMinutes objects whose pointers are stored in the list.
    • FindMinimumTripFare that accepts a reference to a standard list of ConfirmedTravelTrip type pointers and returns the value of minimum totalTripFare from objects whose pointers are stored in the list.
    • FindCountOfGivenBookingType that accepts a reference to a standard list of ConfirmedTravelTrip type pointers and a value of enum class CAR_TYPE. It must return the count of all bookings with CAR_TYPE matching the value passed as a parameter.

Create a Main.cpp file with code to demonstrate each function from the functionalities.cpp file.
