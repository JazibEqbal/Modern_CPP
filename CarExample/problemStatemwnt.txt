create a class called Car with following attributes

- a carBrand attribute of type string
- a carModel attribute of type string
- a carType attribute of type enum CAR_TYPE that can have these categories {SUV,SEDAN,HATCHBACK}
- a carBrand attribute of type float

- a constructor that takes only 2 parameters carBrand & carModel
- a constructor that takes all 4 arguments
- a constructor that takes 3 parameters carBrand, carModel & carType

-a function called calculateInsuranceAmount which calculates as :
   for SUV,SEDAN amount is 15% of carPrice
   for HATCHBACK amount is 5% of carPrice

   a virtual destrutor
   a copy constructor generated by the compiler
   a deleted default constructor
   all getters and setters
   an overloaded << operator

create following in functionalities.cpp functionalities 

a) FindHighestInsurance amount that accepts a standard list of Car pointers & returns the highest amount 
   for insurance amount among the car objects pointed by the list of pointers

b) FindCountOfGivenType that accepts three parameters: 
    a) standard list of car pointers
    b) an enum class CAR_TYPE value 
    c) a limit of type float.
    The function must return the count of cars that match with passed CAR_TYPE
    "If its price is less than or equal to limit specified by the limit parameter"